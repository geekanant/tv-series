{"version":3,"sources":["assets/loader.gif","components/SeriesList/index.js","components/Loader/index.js","components/Intro/index.js","containers/Series/index.js","containers/SingleSeries/index.js","components/Main/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SeriesListItem","_ref","series","react_default","a","createElement","Link","to","concat","show","id","name","SeriesList","props","className","list","map","SeriesList_SeriesListItem","key","Loader","style","width","alt","src","loaderSrc","Intro","message","Series","state","seriesName","isFetching","onSeriesInputChange","e","_this","setState","target","value","fetch","then","response","json","_this$state","this","components_Intro","type","onChange","length","trim","components_Loader","src_components_SeriesList","Component","SingleSeries","_this2","match","params","premiered","rating","average","_embedded","episodes","image","medium","Main","Switch","Route","exact","path","component","App","components_Main","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c820771.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.f4404720.gif\";","import React from 'react';\r\nimport './index.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SeriesListItem = ({series}) => (\r\n    <li >\r\n        <Link to={`/series/${series.show.id}`}>\r\n        {series.show.name}\r\n        </Link>\r\n    </li>\r\n)\r\n\r\nconst SeriesList = (props) => {\r\n    return(\r\n        <div>\r\n            <ul className=\"series-list\">\r\n                {props.list.map(series=>(\r\n                    <SeriesListItem series={series} key={series.show.id} />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SeriesList;","import React from 'react';\r\nimport loaderSrc from '../../assets/loader.gif';\r\n\r\nconst Loader = props => (\r\n    <div>\r\n    <img\r\n        style = {{width:75}}\r\n        alt=\"loader\"\r\n        src={loaderSrc}\r\n    />\r\n    </div>\r\n);\r\n   \r\n\r\n\r\nexport default Loader;","import React, { Component } from 'react';\r\n\r\n\r\nconst Intro = (props) => (\r\n  <p className=\"App-intro\">\r\n    {props.message}\r\n  </p>\r\n);\r\n\r\nexport default Intro;\r\n\r\n","import React, { Component } from 'react';\r\nimport SeriesList from '../../components/SeriesList'\r\nimport Loader from '../../components/Loader';\r\nimport Intro from '../../components/Intro';\r\n\r\n\r\nclass Series extends Component{\r\n  state = {\r\n    series: [],\r\n    seriesName:'',\r\n    isFetching:false\r\n  }\r\n\r\n  onSeriesInputChange = e => {\r\n      this.setState({seriesName:e.target.value,isFetching:true});\r\n      fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\r\n      .then(response => response.json())\r\n      .then(json => this.setState({ series: json,isFetching:false}))\r\n\r\n  }\r\n\r\n  \r\n    render(){\r\n        const {series,seriesName,isFetching} = this.state;\r\n        return(\r\n            <div>\r\n                <Intro message=\"Here you can find your favourite TV series\"/>\r\n                <div>\r\n                    <input\r\n                        value={seriesName}\r\n                        type=\"text\" \r\n                        onChange ={this.onSeriesInputChange}/>\r\n                </div>\r\n                { \r\n                    !isFetching && series.length === 0 &&seriesName.trim() === ''\r\n                    &&\r\n                    <p>Please enter series name into input</p>\r\n                }\r\n                 { \r\n                    !isFetching && series.length === 0 && seriesName.trim() !== ''\r\n                    &&\r\n                    <p>Not Found</p>\r\n                }\r\n                {\r\n                    isFetching && <Loader />\r\n                }\r\n                {\r\n                    !isFetching && <SeriesList list={this.state.series} />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Series;","import React, {Component} from 'react';\r\nimport Loader from '../../components/Loader';\r\n\r\nclass SingleSeries extends Component{\r\n\r\n    state = {\r\n        show: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n         fetch(`http://api.tvmaze.com/shows/${id}?embed=episodes`)\r\n             .then(response => response.json())\r\n            .then(json => this.setState({ show: json }));\r\n\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        const { show } = this.state;\r\n        return(\r\n            <div>\r\n                {show === null && <Loader />}\r\n\r\n                {\r\n                 show!==null \r\n                 &&\r\n                 <div>\r\n                    <p>{show.name}</p>\r\n                    <p>Premiered - {show.premiered}</p>\r\n                    <p>Rating - {show.rating.average}</p>\r\n                    <p>Episodes - {show._embedded.episodes.length}</p>\r\n                    <p>\r\n                        <img alt=\"Show\" src={show.image.medium} />\r\n                    </p>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SingleSeries;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Series from '../../containers/Series';\r\nimport SingleSeries from '../../containers/SingleSeries';\r\n\r\nconst Main = props => (\r\n    <Switch>\r\n        <Route exact path =\"/\" component={Series} />\r\n        <Route path=\"/series/:id\" component={SingleSeries}/>\r\n    </Switch>\r\n)\r\n\r\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport Main from '../Main';\nimport 'whatwg-fetch';\n\nclass App extends Component {\n\n \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            TV Series List\n          </h1>\n        </header>\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter><App /></BrowserRouter>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}